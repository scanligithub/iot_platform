version: '3.5' 
services:
    postgresql:
       # image: nickblah/postgis:10.22-bullseye-postgis-3.2  scanlidocker/postgis_14_33_alpine3.16:v1  postgis/postgis:13-3.2-alpine scanlidocker/postgis_14_33_alpine3.16:v1  openmaptiles-postgis:v14332
        image: scanlidocker/postgis_14_33_alpine3.16:v1
        container_name: postgresql
        # user: root
        restart: always
        ports:
            - '5432:5432'
        security_opt:
            - seccomp:unconfined
        environment:
           POSTGRES_USER: mapgis
           POSTGRES_PASSWORD: mapgis
       #    POSTGRES_DB: db-mapgis
        volumes:
            - ./pgdata:/var/lib/postgresql/data
            - ./configuration/postgresql/initdb:/docker-entrypoint-initdb.d
        networks:
            - networks
            
       # env_file:
       #     - pg.env           



    chirpstack-network-server:
        image: scanlidocker/chirpstack-network-server:v0.21
        container_name: chirpstack-network-server
        # user: root
        restart: always
        volumes:
            - ./configuration/chirpstack-network-server:/etc/chirpstack-network-server
        networks:
            - networks
        depends_on:
            - postgresql
            - mosquitto

    chirpstack-application-server:
        image: scanlidocker/chirpstack-application-server:v0.21
        container_name: chirpstack-application-server
        # user: root
        restart: always
        ports:
            - 8080:8080
        volumes:
            - ./configuration/chirpstack-application-server:/etc/chirpstack-application-server
        networks:
            - networks
        depends_on:
            - chirpstack-network-server

    chirpstack-gateway-bridge:
        image: scanlidocker/chirpstack-gateway-bridge:v0.21
        container_name: chirpstack-gateway-bridge
        # user: root
        restart: always
        ports:
            - 1700:1700/udp
        volumes:
            - ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
        networks:
            - networks
        depends_on: 
            - mosquitto

    LoraWeb:
        image: nginx:stable-alpine
        container_name: nginx
        # user: root
        restart: always
        ports:
            - 8088:80
            - 8089:81
            - 8090:82
            - 8091:83 
         
        volumes:
            - ./nginx/config:/etc/nginx/conf.d
            - ./nginx/dist:/etc/nginx/usr/share/nginx/html
            - ./nginx/font/Microsoft_YaHei:/etc/nginx/usr/share/nginx/font/Microsoft_YaHei
            - ./nginx/sprite:/etc/nginx/usr/share/nginx/sprite
            - ./nginx/style:/etc/nginx/usr/share/nginx/style
            - ./nginx/log:/var/log/nginx
        networks:
            - networks
        depends_on: 
            - chirpstack-application-server

    node-red:
        image:  nodered/node-red:latest-minimal
        container_name: node-red
        # user: root
        restart: always
        ports:
            - 1880:1880
        volumes:
            - ./node_red_data:/data 
        networks:
            - networks 
        depends_on: 
            - LoraWeb

    FUXA :
        image:  scanlidocker/fuxa:latest
        container_name: fuxa
        # user: root
        restart: always
        ports:
            - 1881:1881
        volumes:
            - ./fuxa/fuxa_appdata:/usr/src/app/FUXA/server/_appdata
            - ./fuxa/fuxa_db:/usr/src/app/FUXA/server/_db
            - ./fuxa/fuxa_logs:/usr/src/app/FUXA/server/_logs
            - ./fuxa/fuxa_images:/usr/src/app/FUXA/server/_images
        networks:
            - networks 
        depends_on: 
            - LoraWeb

    portainer:
        image: portainer/portainer:latest
        container_name: portainer
        # user: root
        restart: always
        ports: 
            - 9000:9000
        volumes: 
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - networks   
        depends_on: 
            - node-red          

    redis:
        image: redis:5-alpine
        container_name: redis
        # user: root
        restart: always
        security_opt:
            - seccomp:unconfined   
        volumes:
            - redisdata:/data
        networks:
            - networks

    mosquitto:
        image: eclipse-mosquitto:2
        container_name: mosquitto
        # user: root
        restart: always
        ports:
            - 1883:1883
        volumes: 
            - ./configuration/eclipse-mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
        networks:
            - networks
            
    tileserver-gl-light:
  
        image: scanlidocker/tileserver-gl-light:v4.2.0
        restart: always        
        container_name: tileserver-gl-light
        # user: root
        volumes:
            - ./map_data:/data
        #env_file:
        #    - pg_tileserv.env
        networks:
            - networks
        depends_on:
            - postgresql
        ports:
            - 9090:8080
            
    pgadmin4:
        image: dpage/pgadmin4:latest
        container_name: pgadmin4
        # user: root
        restart: always
        ports:
            - '5050:80'
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@126.com
            PGADMIN_DEFAULT_PASSWORD: 222222
        #/var/lib/docker/volumes/map_pgadmin_vol/_data/storage/admin_126.com/        
        volumes:
            - ./pgadmin_vol:/var/lib/pgadmin 
        networks:
            - networks
  
  #      links: 
  #          - postgis

volumes:
    pgdata:
    redisdata:
    
networks:
    networks:
        driver: bridge
        name: postgis_network
#
#
#         pg-tileserv 启动过程
# 1、docker-compose down    重建数据库，无表
# 2、docker-compose up
# 3、在数据库database-name中添加表（可采用备份恢复模式）
# 4、ctrl-C
# 5、docker-compose up
# 
#      QGIS添加表流程
#  1、docker-compose up 启动数据库后，在QGID>浏览器>postgreSQL>新建连接
# （主机：192.168.12.197； 数据库：database-name；配置>基本>用户名：postgres，
#  密码：postgres）
#  2、导入表  QGIS>数据库>数据库管理器>数据源>postGIS>database-name>public   
#      从数据库管理器上面的工具栏里点击“导入层或文件 ”   选择需要导入的shp文件
#
#      QGIS需要安装的插件  DB Manager,QuickOSM,QuickMapServers,
# 
# # 
# 
# 
# 
